// Vitest Snapshot v1

exports[`statements > should optimize for-of statements 1`] = `
"import { useRef as _useRef } from \\"react\\";
import { $$cache as _$$cache } from \\"forgetti/runtime\\";
import { $$branch as _$$branch } from \\"forgetti/runtime\\";
import { $$equals as _$$equals } from \\"forgetti/runtime\\";
function Example(props) {
  let _cache = _$$cache(_useRef, 5),
    _equals = _$$equals(_cache, 0, props),
    _value = _equals ? _cache[0] : _cache[0] = props,
    _condition3 = _equals ? _cache[1] : _cache[1] = _value.a;
  if (_condition3) {
    let _cache2 = _$$branch(_cache, 2, 2),
      _equals2 = _$$equals(_cache2, 0, props),
      _value3 = _equals2 ? _cache2[0] : _cache2[0] = props;
    _condition3 = _equals2 ? _cache2[1] : _cache2[1] = _value3.b;
  }
  let _condition2 = _condition3;
  if (_condition2) {
    let _cache3 = _$$branch(_cache, 3, 2),
      _equals3 = _$$equals(_cache3, 0, props),
      _value5 = _equals3 ? _cache3[0] : _cache3[0] = props;
    _condition2 = _equals3 ? _cache3[1] : _cache3[1] = _value5.c;
  }
  let _condition = _condition2;
  if (_condition) {
    let _cache4 = _$$branch(_cache, 4, 2),
      _equals4 = _$$equals(_cache4, 0, props),
      _value7 = _equals4 ? _cache4[0] : _cache4[0] = props;
    _condition = _equals4 ? _cache4[1] : _cache4[1] = _value7.d;
  }
  return _condition;
}"
`;
