// Vitest Snapshot v1

exports[`statements > should optimize for-of statements 1`] = `
"import { useRef as _useRef } from \\"react\\";
import { $$cache as _$$cache } from \\"forgetti/runtime\\";
import { $$branch as _$$branch } from \\"forgetti/runtime\\";
import { $$equals as _$$equals } from \\"forgetti/runtime\\";
function Example(props) {
  let _cache = _$$cache(_useRef, 8),
    _equals = _$$equals(_cache, 0, props),
    _value = _equals ? _cache[0] : _cache[0] = props,
    _condition3 = _equals ? _cache[1] : _cache[1] = _value.a,
    _value3 = _$$equals(_cache, 2, _condition3) ? _cache[2] : _cache[2] = _condition3;
  if (_value3) {
    let _cache2 = _$$branch(_cache, 3, 3),
      _equals3 = _$$equals(_cache2, 0, props),
      _value4 = _equals3 ? _cache2[0] : _cache2[0] = props,
      _value5 = _equals3 ? _cache2[1] : _cache2[1] = _value4.b;
    _condition3 = _$$equals(_cache2, 2, _value5) ? _cache2[2] : _cache2[2] = _value5;
  }
  let _condition2 = _value3,
    _value7 = _$$equals(_cache, 4, _condition2) ? _cache[4] : _cache[4] = _condition2;
  if (_value7) {
    let _cache3 = _$$branch(_cache, 5, 3),
      _equals6 = _$$equals(_cache3, 0, props),
      _value8 = _equals6 ? _cache3[0] : _cache3[0] = props,
      _value9 = _equals6 ? _cache3[1] : _cache3[1] = _value8.c;
    _condition2 = _$$equals(_cache3, 2, _value9) ? _cache3[2] : _cache3[2] = _value9;
  }
  let _condition = _value7,
    _value11 = _$$equals(_cache, 6, _condition) ? _cache[6] : _cache[6] = _condition;
  if (_value11) {
    let _cache4 = _$$branch(_cache, 7, 3),
      _equals9 = _$$equals(_cache4, 0, props),
      _value12 = _equals9 ? _cache4[0] : _cache4[0] = props,
      _value13 = _equals9 ? _cache4[1] : _cache4[1] = _value12.d;
    _condition = _$$equals(_cache4, 2, _value13) ? _cache4[2] : _cache4[2] = _value13;
  }
  return _value11;
}"
`;
