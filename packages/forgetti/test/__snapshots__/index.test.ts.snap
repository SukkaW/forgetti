// Vitest Snapshot v1

exports[`statements > should optimize for-of statements 1`] = `
"import { useRef as _useRef } from \\"react\\";
import { $$cache as _$$cache } from \\"forgetti/runtime\\";
import { $$branch as _$$branch } from \\"forgetti/runtime\\";
import { $$equals as _$$equals } from \\"forgetti/runtime\\";
function Example(props) {
  let _cache = _$$cache(_useRef, 5),
    _equals = _$$equals(_cache, 0, props),
    _value4 = _equals ? _cache[0] : _cache[0] = props,
    _value5 = _equals ? _cache[1] : _cache[1] = _value4.a,
    _value3;
  if (_value5) {
    let _cache2 = _$$branch(_cache, 2, 2),
      _equals2 = _$$equals(_cache2, 0, props),
      _value6 = _equals2 ? _cache2[0] : _cache2[0] = props;
    _value3 = _equals2 ? _cache2[1] : _cache2[1] = _value6.b;
  } else _value3 = _value5;
  let _value2;
  if (_value3) {
    let _cache3 = _$$branch(_cache, 3, 2),
      _equals3 = _$$equals(_cache3, 0, props),
      _value8 = _equals3 ? _cache3[0] : _cache3[0] = props;
    _value2 = _equals3 ? _cache3[1] : _cache3[1] = _value8.c;
  } else _value2 = _value3;
  let _value;
  if (_value2) {
    let _cache4 = _$$branch(_cache, 4, 2),
      _equals4 = _$$equals(_cache4, 0, props),
      _value10 = _equals4 ? _cache4[0] : _cache4[0] = props;
    _value = _equals4 ? _cache4[1] : _cache4[1] = _value10.d;
  } else _value = _value2;
  return _value;
}"
`;
