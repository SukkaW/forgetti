// Vitest Snapshot v1

exports[`expressions > should optimize JSX Element 1`] = `
"import { useRef as _useRef } from \\"react\\";
import { $$cache as _$$cache } from \\"forgetti/runtime\\";
import { $$equals as _$$equals } from \\"forgetti/runtime\\";
import { memo as _memo } from \\"react\\";
import { $$memo as _$$memo } from \\"forgetti/runtime\\";
const _Memo = _$$memo(_memo, _values => <div>
      <h1 title={_values[0]}>Title: {_values[1]}</h1>
      {_values[2]}
    </div>);
function Example(props) {
  let _cache = _$$cache(_useRef, 10),
    _equals = _$$equals(_cache, 0, props),
    _value = _equals ? _cache[0] : _cache[0] = props,
    _value2 = _equals ? _cache[1] : _cache[1] = _value.title,
    _equals2 = _$$equals(_cache, 2, _value2),
    _value3 = _equals2 ? _cache[2] : _cache[2] = _value2,
    _value4 = _equals ? _cache[3] : _cache[3] = _value.title,
    _equals3 = _$$equals(_cache, 4, _value4),
    _value5 = _equals3 ? _cache[4] : _cache[4] = _value4,
    _value6 = _equals ? _cache[5] : _cache[5] = _value.children,
    _equals4 = _$$equals(_cache, 6, _value6),
    _value7 = _equals4 ? _cache[6] : _cache[6] = _value6,
    _value8 = _equals2 && _equals3 && _equals4 ? _cache[7] : _cache[7] = [_value3, _value5, _value7],
    _equals6 = _$$equals(_cache, 8, _value8),
    _value9 = _equals6 ? _cache[8] : _cache[8] = _value8;
  return _equals6 ? _cache[9] : _cache[9] = /*@forgetti jsx*/<_Memo v={_value9} />;
}"
`;

exports[`expressions > should optimize JSX Fragment 1`] = `
"import { useRef as _useRef } from \\"react\\";
import { $$cache as _$$cache } from \\"forgetti/runtime\\";
import { $$equals as _$$equals } from \\"forgetti/runtime\\";
import { memo as _memo } from \\"react\\";
import { $$memo as _$$memo } from \\"forgetti/runtime\\";
const _Memo = _$$memo(_memo, _values => <>
      <h1 title={_values[0]}>Title: {_values[1]}</h1>
      {_values[2]}
    </>);
function Example(props) {
  let _cache = _$$cache(_useRef, 10),
    _equals = _$$equals(_cache, 0, props),
    _value = _equals ? _cache[0] : _cache[0] = props,
    _value2 = _equals ? _cache[1] : _cache[1] = _value.title,
    _equals2 = _$$equals(_cache, 2, _value2),
    _value3 = _equals2 ? _cache[2] : _cache[2] = _value2,
    _value4 = _equals ? _cache[3] : _cache[3] = _value.title,
    _equals3 = _$$equals(_cache, 4, _value4),
    _value5 = _equals3 ? _cache[4] : _cache[4] = _value4,
    _value6 = _equals ? _cache[5] : _cache[5] = _value.children,
    _equals4 = _$$equals(_cache, 6, _value6),
    _value7 = _equals4 ? _cache[6] : _cache[6] = _value6,
    _value8 = _equals2 && _equals3 && _equals4 ? _cache[7] : _cache[7] = [_value3, _value5, _value7],
    _equals6 = _$$equals(_cache, 8, _value8),
    _value9 = _equals6 ? _cache[8] : _cache[8] = _value8;
  return _equals6 ? _cache[9] : _cache[9] = /*@forgetti jsx*/<_Memo v={_value9} />;
}"
`;

exports[`expressions > should optimize array expressions 1`] = `
"import { useRef as _useRef } from \\"react\\";
import { $$cache as _$$cache } from \\"forgetti/runtime\\";
import { $$equals as _$$equals } from \\"forgetti/runtime\\";
function Example(props) {
  let _cache = _$$cache(_useRef, 8),
    _equals = _$$equals(_cache, 0, props),
    _value = _equals ? _cache[0] : _cache[0] = props,
    _value2 = _equals ? _cache[1] : _cache[1] = _value.a,
    _equals2 = _$$equals(_cache, 2, _value2),
    _value3 = _equals2 ? _cache[2] : _cache[2] = _value2,
    _value4 = _equals ? _cache[3] : _cache[3] = _value.b,
    _equals3 = _$$equals(_cache, 4, _value4),
    _value5 = _equals3 ? _cache[4] : _cache[4] = _value4,
    _value6 = _equals ? _cache[5] : _cache[5] = _value.c,
    _equals4 = _$$equals(_cache, 6, _value6),
    _value7 = _equals4 ? _cache[6] : _cache[6] = _value6;
  return _equals2 && _equals3 && _equals4 ? _cache[7] : _cache[7] = [_value3, _value5, ..._value7];
}"
`;

exports[`expressions > should optimize assignment expressions 1`] = `
"import { useRef as _useRef } from \\"react\\";
import { $$cache as _$$cache } from \\"forgetti/runtime\\";
import { $$equals as _$$equals } from \\"forgetti/runtime\\";
function Example(props) {
  let _cache = _$$cache(_useRef, 5),
    a,
    b,
    c,
    _equals = _$$equals(_cache, 0, props),
    _value = _equals ? _cache[0] : _cache[0] = props,
    _value2 = _equals ? _cache[1] : _cache[1] = _value.x,
    _hoisted2 = c = _$$equals(_cache, 2, _value2) ? _cache[2] : _cache[2] = _value2,
    _hoisted = b = _$$equals(_cache, 3, _hoisted2) ? _cache[3] : _cache[3] = _hoisted2;
  a = _$$equals(_cache, 4, _hoisted) ? _cache[4] : _cache[4] = _hoisted;
}"
`;

exports[`expressions > should optimize binary expressions 1`] = `
"import { useRef as _useRef } from \\"react\\";
import { $$cache as _$$cache } from \\"forgetti/runtime\\";
import { $$equals as _$$equals } from \\"forgetti/runtime\\";
function Example(props) {
  let _cache = _$$cache(_useRef, 6),
    _equals = _$$equals(_cache, 0, props),
    _value = _equals ? _cache[0] : _cache[0] = props,
    _value2 = _equals ? _cache[1] : _cache[1] = _value.a,
    _equals2 = _$$equals(_cache, 2, _value2),
    _value3 = _equals2 ? _cache[2] : _cache[2] = _value2,
    _value4 = _equals ? _cache[3] : _cache[3] = _value.b,
    _equals3 = _$$equals(_cache, 4, _value4),
    _value5 = _equals3 ? _cache[4] : _cache[4] = _value4;
  return _equals2 && _equals3 ? _cache[5] : _cache[5] = _value3 + _value5;
}"
`;

exports[`expressions > should optimize call expressions 1`] = `
"import { useRef as _useRef } from \\"react\\";
import { $$cache as _$$cache } from \\"forgetti/runtime\\";
import { $$equals as _$$equals } from \\"forgetti/runtime\\";
function Example(props) {
  let _cache = _$$cache(_useRef, 2),
    _equals = _$$equals(_cache, 0, props),
    _value = _equals ? _cache[0] : _cache[0] = props;
  return _equals ? _cache[1] : _cache[1] = _value.call();
}"
`;

exports[`expressions > should optimize conditional expressions 1`] = `
"import { useRef as _useRef } from \\"react\\";
import { $$cache as _$$cache } from \\"forgetti/runtime\\";
import { $$branch as _$$branch } from \\"forgetti/runtime\\";
import { $$equals as _$$equals } from \\"forgetti/runtime\\";
function Example(props) {
  let _cache = _$$cache(_useRef, 4),
    _equals = _$$equals(_cache, 0, props),
    _value2 = _equals ? _cache[0] : _cache[0] = props,
    _value;
  if (_equals ? _cache[1] : _cache[1] = _value2.a) {
    let _cache2 = _$$branch(_cache, 2, 2),
      _equals2 = _$$equals(_cache2, 0, props),
      _value4 = _equals2 ? _cache2[0] : _cache2[0] = props;
    _value = _equals2 ? _cache2[1] : _cache2[1] = _value4.b;
  } else {
    let _cache3 = _$$branch(_cache, 3, 2),
      _equals3 = _$$equals(_cache3, 0, props),
      _value6 = _equals3 ? _cache3[0] : _cache3[0] = props;
    _value = _equals3 ? _cache3[1] : _cache3[1] = _value6.c;
  }
  return _value;
}"
`;

exports[`expressions > should optimize function expressions 1`] = `
"import { useRef as _useRef } from \\"react\\";
import { $$cache as _$$cache } from \\"forgetti/runtime\\";
import { $$equals as _$$equals } from \\"forgetti/runtime\\";
function Example(props) {
  let _cache = _$$cache(_useRef, 2),
    _equals = _$$equals(_cache, 0, props),
    _value = _equals ? _cache[0] : _cache[0] = props;
  const callback = _equals ? _cache[1] : _cache[1] = () => {
    console.log(props.message);
  };
}"
`;

exports[`expressions > should optimize guaranteed literals 1`] = `
"import { useRef as _useRef } from \\"react\\";
import { $$cache as _$$cache } from \\"forgetti/runtime\\";
function Example(props) {
  let _cache = _$$cache(_useRef, 1);
  return 0 in _cache ? _cache[0] : _cache[0] = 1 + 2;
}"
`;

exports[`expressions > should optimize identifiers 1`] = `
"import { useRef as _useRef } from \\"react\\";
import { $$cache as _$$cache } from \\"forgetti/runtime\\";
import { $$equals as _$$equals } from \\"forgetti/runtime\\";
function Example(props) {
  let _cache = _$$cache(_useRef, 1);
  return _$$equals(_cache, 0, props) ? _cache[0] : _cache[0] = props;
}"
`;

exports[`expressions > should optimize logical expressions 1`] = `
"import { useRef as _useRef } from \\"react\\";
import { $$cache as _$$cache } from \\"forgetti/runtime\\";
import { $$branch as _$$branch } from \\"forgetti/runtime\\";
import { $$equals as _$$equals } from \\"forgetti/runtime\\";
function Example(props) {
  let _cache = _$$cache(_useRef, 3),
    _equals = _$$equals(_cache, 0, props),
    _value = _equals ? _cache[0] : _cache[0] = props,
    _condition = _equals ? _cache[1] : _cache[1] = _value.a;
  if (_condition) {
    let _cache2 = _$$branch(_cache, 2, 2),
      _equals2 = _$$equals(_cache2, 0, props),
      _value3 = _equals2 ? _cache2[0] : _cache2[0] = props;
    _condition = _equals2 ? _cache2[1] : _cache2[1] = _value3.b;
  }
  return _condition;
}"
`;

exports[`expressions > should optimize member expressions 1`] = `
"import { useRef as _useRef } from \\"react\\";
import { $$cache as _$$cache } from \\"forgetti/runtime\\";
import { $$equals as _$$equals } from \\"forgetti/runtime\\";
function Example(props) {
  let _cache = _$$cache(_useRef, 2),
    _equals = _$$equals(_cache, 0, props),
    _value = _equals ? _cache[0] : _cache[0] = props;
  return _equals ? _cache[1] : _cache[1] = _value.example;
}"
`;

exports[`expressions > should optimize new expressions 1`] = `
"import { useRef as _useRef } from \\"react\\";
import { $$cache as _$$cache } from \\"forgetti/runtime\\";
import { $$equals as _$$equals } from \\"forgetti/runtime\\";
function Example(props) {
  let _cache = _$$cache(_useRef, 3),
    _value = 0 in _cache ? _cache[0] : _cache[0] = X,
    _equals = _$$equals(_cache, 1, props),
    _value2 = _equals ? _cache[1] : _cache[1] = props;
  return _equals ? _cache[2] : _cache[2] = new _value(_value2);
}"
`;

exports[`expressions > should optimize object expressions 1`] = `
"import { useRef as _useRef } from \\"react\\";
import { $$cache as _$$cache } from \\"forgetti/runtime\\";
import { $$equals as _$$equals } from \\"forgetti/runtime\\";
function Example(props) {
  let _cache = _$$cache(_useRef, 6),
    _equals = _$$equals(_cache, 0, props),
    _value = _equals ? _cache[0] : _cache[0] = props,
    _value2 = _equals ? _cache[1] : _cache[1] = _value.a,
    _value3 = _equals ? _cache[2] : _cache[2] = _value.b,
    _value4 = _equals ? _cache[3] : _cache[3] = _value.c,
    _equals2 = _$$equals(_cache, 4, _value4),
    _value5 = _equals2 ? _cache[4] : _cache[4] = _value4;
  return _equals && _equals2 ? _cache[5] : _cache[5] = {
    a: _value2,
    b: _value3,
    ..._value5
  };
}"
`;

exports[`expressions > should optimize optional call expression 1`] = `
"import { useRef as _useRef } from \\"react\\";
import { $$cache as _$$cache } from \\"forgetti/runtime\\";
import { $$branch as _$$branch } from \\"forgetti/runtime\\";
import { $$equals as _$$equals } from \\"forgetti/runtime\\";
function Example(props) {
  let _cache = _$$cache(_useRef, 7),
    _nullish,
    _equals = _$$equals(_cache, 0, props),
    _value = _equals ? _cache[0] : _cache[0] = props,
    _value2 = _equals ? _cache[1] : _cache[1] = _value.a,
    _hoisted = _nullish = _$$equals(_cache, 2, _value2) ? _cache[2] : _cache[2] = _value2,
    _equals3 = _$$equals(_cache, 3, _hoisted),
    _value5 = _equals3 ? _cache[3] : _cache[3] = _hoisted,
    _value4;
  if (_equals3 ? _cache[4] : _cache[4] = _value5 == null) {
    let _cache2 = _$$branch(_cache, 5, 1);
    _value4 = 0 in _cache2 ? _cache2[0] : _cache2[0] = void 0;
  } else {
    let _cache3 = _$$branch(_cache, 6, 7),
      _equals4 = _$$equals(_cache3, 0, _nullish),
      _value8 = _equals4 ? _cache3[0] : _cache3[0] = _nullish,
      _equals5 = _$$equals(_cache3, 1, props),
      _value9 = _equals5 ? _cache3[1] : _cache3[1] = props,
      _value10 = _equals5 ? _cache3[2] : _cache3[2] = _value9.b,
      _equals6 = _$$equals(_cache3, 3, _value10),
      _value11 = _equals6 ? _cache3[3] : _cache3[3] = _value10,
      _value12 = _equals5 ? _cache3[4] : _cache3[4] = _value9.c,
      _equals7 = _$$equals(_cache3, 5, _value12),
      _value13 = _equals7 ? _cache3[5] : _cache3[5] = _value12;
    _value4 = _equals4 && _equals6 && _equals7 ? _cache3[6] : _cache3[6] = _value8(_value11, _value13);
  }
  return _value4;
}"
`;

exports[`expressions > should optimize optional member expression 1`] = `
"import { useRef as _useRef } from \\"react\\";
import { $$cache as _$$cache } from \\"forgetti/runtime\\";
import { $$branch as _$$branch } from \\"forgetti/runtime\\";
import { $$equals as _$$equals } from \\"forgetti/runtime\\";
function Example(props) {
  let _cache = _$$cache(_useRef, 15),
    _nullish,
    _nullish2,
    _nullish3,
    _hoisted3 = _nullish3 = _$$equals(_cache, 0, props) ? _cache[0] : _cache[0] = props,
    _equals2 = _$$equals(_cache, 1, _hoisted3),
    _value3 = _equals2 ? _cache[1] : _cache[1] = _hoisted3,
    _value2;
  if (_equals2 ? _cache[2] : _cache[2] = _value3 == null) {
    let _cache2 = _$$branch(_cache, 3, 1);
    _value2 = 0 in _cache2 ? _cache2[0] : _cache2[0] = void 0;
  } else {
    let _cache3 = _$$branch(_cache, 4, 2),
      _equals3 = _$$equals(_cache3, 0, _nullish3),
      _value6 = _equals3 ? _cache3[0] : _cache3[0] = _nullish3;
    _value2 = _equals3 ? _cache3[1] : _cache3[1] = _value6.a;
  }
  let _hoisted2 = _nullish2 = _$$equals(_cache, 5, _value2) ? _cache[5] : _cache[5] = _value2,
    _equals5 = _$$equals(_cache, 6, _hoisted2),
    _value10 = _equals5 ? _cache[6] : _cache[6] = _hoisted2,
    _value9;
  if (_equals5 ? _cache[7] : _cache[7] = _value10 == null) {
    let _cache4 = _$$branch(_cache, 8, 1);
    _value9 = 0 in _cache4 ? _cache4[0] : _cache4[0] = void 0;
  } else {
    let _cache5 = _$$branch(_cache, 9, 2),
      _equals6 = _$$equals(_cache5, 0, _nullish2),
      _value13 = _equals6 ? _cache5[0] : _cache5[0] = _nullish2;
    _value9 = _equals6 ? _cache5[1] : _cache5[1] = _value13.b;
  }
  let _hoisted = _nullish = _$$equals(_cache, 10, _value9) ? _cache[10] : _cache[10] = _value9,
    _equals8 = _$$equals(_cache, 11, _hoisted),
    _value17 = _equals8 ? _cache[11] : _cache[11] = _hoisted,
    _value16;
  if (_equals8 ? _cache[12] : _cache[12] = _value17 == null) {
    let _cache6 = _$$branch(_cache, 13, 1);
    _value16 = 0 in _cache6 ? _cache6[0] : _cache6[0] = void 0;
  } else {
    let _cache7 = _$$branch(_cache, 14, 2),
      _equals9 = _$$equals(_cache7, 0, _nullish),
      _value20 = _equals9 ? _cache7[0] : _cache7[0] = _nullish;
    _value16 = _equals9 ? _cache7[1] : _cache7[1] = _value20.c;
  }
  return _value16;
}"
`;

exports[`expressions > should optimize sequence expressions 1`] = `
"import { useRef as _useRef } from \\"react\\";
import { $$cache as _$$cache } from \\"forgetti/runtime\\";
import { $$equals as _$$equals } from \\"forgetti/runtime\\";
function Example(props) {
  let _cache = _$$cache(_useRef, 3),
    _equals = _$$equals(_cache, 0, props),
    _value = _equals ? _cache[0] : _cache[0] = props;
  return _equals ? _cache[1] : _cache[1] = _value.a(), _equals ? _cache[2] : _cache[2] = _value.b();
}"
`;

exports[`expressions > should optimize tagged templates 1`] = `
"import { useRef as _useRef } from \\"react\\";
import { $$cache as _$$cache } from \\"forgetti/runtime\\";
import { $$equals as _$$equals } from \\"forgetti/runtime\\";
function Example(props) {
  let _cache = _$$cache(_useRef, 8),
    _equals = _$$equals(_cache, 0, props),
    _value = _equals ? _cache[0] : _cache[0] = props,
    _value2 = _equals ? _cache[1] : _cache[1] = _value.tag,
    _equals2 = _$$equals(_cache, 2, _value2),
    _value3 = _equals2 ? _cache[2] : _cache[2] = _value2,
    _value4 = _equals ? _cache[3] : _cache[3] = _value.a(),
    _equals3 = _$$equals(_cache, 4, _value4),
    _value5 = _equals3 ? _cache[4] : _cache[4] = _value4,
    _value6 = _equals ? _cache[5] : _cache[5] = _value.b(),
    _equals4 = _$$equals(_cache, 6, _value6),
    _value7 = _equals4 ? _cache[6] : _cache[6] = _value6;
  return _equals2 && _equals3 && _equals4 ? _cache[7] : _cache[7] = _value3\`\${_value5}, \${_value7}\`;
}"
`;

exports[`expressions > should optimize template literals 1`] = `
"import { useRef as _useRef } from \\"react\\";
import { $$cache as _$$cache } from \\"forgetti/runtime\\";
import { $$equals as _$$equals } from \\"forgetti/runtime\\";
function Example(props) {
  let _cache = _$$cache(_useRef, 6),
    _equals = _$$equals(_cache, 0, props),
    _value = _equals ? _cache[0] : _cache[0] = props,
    _value2 = _equals ? _cache[1] : _cache[1] = _value.a(),
    _equals2 = _$$equals(_cache, 2, _value2),
    _value3 = _equals2 ? _cache[2] : _cache[2] = _value2,
    _value4 = _equals ? _cache[3] : _cache[3] = _value.b(),
    _equals3 = _$$equals(_cache, 4, _value4),
    _value5 = _equals3 ? _cache[4] : _cache[4] = _value4;
  return _equals2 && _equals3 ? _cache[5] : _cache[5] = \`\${_value3}, \${_value5}\`;
}"
`;

exports[`expressions > should optimize unary expressions 1`] = `
"import { useRef as _useRef } from \\"react\\";
import { $$cache as _$$cache } from \\"forgetti/runtime\\";
import { $$equals as _$$equals } from \\"forgetti/runtime\\";
function Example(props) {
  let _cache = _$$cache(_useRef, 4),
    _equals = _$$equals(_cache, 0, props),
    _value = _equals ? _cache[0] : _cache[0] = props,
    _value2 = _equals ? _cache[1] : _cache[1] = _value.a,
    _equals2 = _$$equals(_cache, 2, _value2),
    _value3 = _equals2 ? _cache[2] : _cache[2] = _value2;
  return _equals2 ? _cache[3] : _cache[3] = !_value3;
}"
`;
