// Vitest Snapshot v1

exports[`hooks > should correct transform any nested hooks call 1`] = `
"import { useMemo as _useMemo } from \\"react\\";
import { $$cache as _$$cache } from \\"forgetti/runtime\\";
import { $$equals as _$$equals } from \\"forgetti/runtime\\";
import { useA, useB, useC, useD, useE, useF, useG, useH } from 'whatever';
function Example(props) {
  let _c = _$$cache(_useMemo, 21),
    a = null,
    _hoisted2 = useB(),
    _hoisted3 = useC(),
    _hoisted4 = useD(),
    _hoisted5 = useE(),
    _hoisted6 = useF(),
    _hoisted7 = useG(),
    _hoisted8 = useH(),
    _hoisted9 = useI(),
    _hoisted10 = useJ(),
    _hoisted13 = useK(),
    _hoisted11 = a = _$$equals(_c, 0, _hoisted13) ? _c[0] : _c[0] = _hoisted13,
    _hoisted12 = useJ(),
    _eq3 = _$$equals(_c, 2, _hoisted3),
    _v3 = _eq3 ? _c[2] : _c[2] = _hoisted3,
    _v4 = _eq3 ? _c[3] : _c[3] = [_v3, 'array'],
    _eq5 = _$$equals(_c, 5, _hoisted4),
    _v6 = _eq5 ? _c[5] : _c[5] = _hoisted4,
    _eq6 = _$$equals(_c, 6, _hoisted5),
    _v7 = _eq6 ? _c[6] : _c[6] = _hoisted5,
    _eq7 = _$$equals(_c, 7, _hoisted6),
    _v8 = _eq7 ? _c[7] : _c[7] = _hoisted6,
    _eq8 = _$$equals(_c, 8, _hoisted7),
    _v9 = _eq8 ? _c[8] : _c[8] = _hoisted7,
    _v10 = _eq5 && _eq6 && _eq7 && _eq8 ? _c[9] : _c[9] = {
      d: _v6,
      [_v7]: _v8,
      ..._v9
    },
    _eq11 = _$$equals(_c, 11, _hoisted8),
    _v12 = _eq11 ? _c[11] : _c[11] = _hoisted8,
    _v13 = _eq11 ? _c[12] : _c[12] = \`testA\${_v12}testB\`,
    _eq13 = _$$equals(_c, 14, _hoisted9),
    _v15 = _eq13 ? _c[14] : _c[14] = _hoisted9,
    _eq14 = _$$equals(_c, 15, _hoisted10),
    _v16 = _eq14 ? _c[15] : _c[15] = _hoisted10,
    _v17 = _eq13 && _eq14 ? _c[16] : _c[16] = _v15 === _v16,
    _hoisted = useA(_$$equals(_c, 1, _hoisted2) ? _c[1] : _c[1] = _hoisted2, _$$equals(_c, 4, _v4) ? _c[4] : _c[4] = _v4, _$$equals(_c, 10, _v10) ? _c[10] : _c[10] = _v10, _$$equals(_c, 13, _v13) ? _c[13] : _c[13] = _v13, _$$equals(_c, 17, _v17) ? _c[17] : _c[17] = _v17, _$$equals(_c, 18, _hoisted11) ? _c[18] : _c[18] = _hoisted11, ...(_$$equals(_c, 19, _hoisted12) ? _c[19] : _c[19] = _hoisted12));
  return _$$equals(_c, 20, _hoisted) ? _c[20] : _c[20] = _hoisted;
}"
`;

exports[`hooks > should correct transform derived hooks call 1`] = `
"import { useMemo as _useMemo } from \\"react\\";
import { $$cache as _$$cache } from \\"forgetti/runtime\\";
import { memo as _memo } from \\"react\\";
import { $$memo as _$$memo } from \\"forgetti/runtime\\";
import { $$equals as _$$equals } from \\"forgetti/runtime\\";
const _Memo = _$$memo(_memo);
import { useA, useB, useC } from 'whatever';
function Example(props) {
  let _c = _$$cache(_useMemo, 16),
    a = null,
    _hoisted = useA(),
    _hoisted2 = useB(),
    _hoisted3 = useC(),
    _hoisted4 = useH(),
    _hoisted5 = useI(),
    _hoisted6 = useJ(),
    _hoisted7 = useK(),
    _hoisted8 = useL(),
    _hoisted9 = useM(),
    _hoisted10 = useN(),
    _eq = _$$equals(_c, 0, _hoisted),
    _v = _eq ? _c[0] : _c[0] = _hoisted,
    _eq2 = _$$equals(_c, 1, _hoisted2),
    _v2 = _eq2 ? _c[1] : _c[1] = _hoisted2,
    _eq3 = _$$equals(_c, 2, _hoisted3),
    _v3 = _eq3 ? _c[2] : _c[2] = _hoisted3,
    _eq4 = _$$equals(_c, 3, _hoisted4),
    _v4 = _eq4 ? _c[3] : _c[3] = _hoisted4,
    _v5 = _eq4 ? _c[4] : _c[4] = \`testA\${_v4}testB\`,
    _eq5 = _$$equals(_c, 5, _v5),
    _v6 = _eq5 ? _c[5] : _c[5] = _v5,
    _eq6 = _$$equals(_c, 6, _hoisted5),
    _v7 = _eq6 ? _c[6] : _c[6] = _hoisted5,
    _eq7 = _$$equals(_c, 7, _hoisted6),
    _v8 = _eq7 ? _c[7] : _c[7] = _hoisted6,
    _eq8 = _eq6 && _eq7,
    _v9 = _eq8 ? _c[8] : _c[8] = _v7 === _v8,
    _v10;
  if (_$$equals(_c, 9, _hoisted7) ? _c[9] : _c[9] = _hoisted7) {
    _v10 = 'a';
  } else {
    _v10 = 'b';
  }
  let _eq10 = _$$equals(_c, 10, _hoisted8),
    _v12 = _eq10 ? _c[10] : _c[10] = _hoisted8,
    _v13 = _eq10 ? _c[11] : _c[11] = <_Memo value={<div>{_v12}</div>} />,
    _eq11 = _$$equals(_c, 12, _hoisted9),
    _v14 = _eq11 ? _c[12] : _c[12] = _hoisted9,
    _eq12 = _$$equals(_c, 13, _hoisted10),
    _v15 = _eq12 ? _c[13] : _c[13] = _hoisted10,
    _eq13 = _eq11 && _eq12,
    _v16 = _eq13 ? _c[14] : _c[14] = <_Memo value={<>{_v14}{_v15}</>} />;
  return _eq && _eq2 && _eq3 && _eq5 && _eq8 && _eq10 && _eq13 ? _c[15] : _c[15] = {
    [_v]: _v2,
    ..._v3,
    [_v6]: _v9,
    a: _v10,
    b: _v13,
    c: _v16
  };
}"
`;

exports[`hooks > should correct transform nested hooks call (issue #14) 1`] = `
"import { useMemo as _useMemo } from \\"react\\";
import { $$cache as _$$cache } from \\"forgetti/runtime\\";
import { $$equals as _$$equals } from \\"forgetti/runtime\\";
import { useDeferredValue } from 'react';
import { useAtomValue } from 'jotai';
import { stateAtom } from 'whatever';
function Example(props) {
  let _c = _$$cache(_useMemo, 3),
    _hoisted2 = useAtomValue(0 in _c ? _c[0] : _c[0] = stateAtom),
    _hoisted = useDeferredValue(_$$equals(_c, 1, _hoisted2) ? _c[1] : _c[1] = _hoisted2);
  return _$$equals(_c, 2, _hoisted) ? _c[2] : _c[2] = _hoisted;
}"
`;

exports[`hooks > should optimize useCallback 1`] = `
"import { useMemo as _useMemo } from \\"react\\";
import { $$cache as _$$cache } from \\"forgetti/runtime\\";
import { $$equals as _$$equals } from \\"forgetti/runtime\\";
import { useCallback } from 'react';
function Example(props) {
  let _c = _$$cache(_useMemo, 5),
    _eq = _$$equals(_c, 0, props),
    _v = _eq ? _c[0] : _c[0] = props,
    _v2 = _eq ? _c[1] : _c[1] = _v.value,
    _eq2 = _$$equals(_c, 2, _v2),
    _v3 = _eq2 ? _c[2] : _c[2] = _v2,
    _v4 = _eq2 ? _c[3] : _c[3] = [_v3];
  return _eq2 ? _c[4] : _c[4] = () => props.value();
}"
`;

exports[`hooks > should optimize useCallback with 0 dependencies 1`] = `
"import { useMemo as _useMemo } from \\"react\\";
import { $$cache as _$$cache } from \\"forgetti/runtime\\";
import { useCallback } from 'react';
function Example(props) {
  let _c = _$$cache(_useMemo, 2),
    _v = 0 in _c ? _c[0] : _c[0] = [];
  return 1 in _c ? _c[1] : _c[1] = () => props.value();
}"
`;

exports[`hooks > should optimize useCallback with auto dependencies 1`] = `
"import { useMemo as _useMemo } from \\"react\\";
import { $$cache as _$$cache } from \\"forgetti/runtime\\";
import { $$equals as _$$equals } from \\"forgetti/runtime\\";
import { useCallback } from 'react';
function Example(props) {
  let _c = _$$cache(_useMemo, 2),
    _eq = _$$equals(_c, 0, props),
    _v = _eq ? _c[0] : _c[0] = props;
  return _eq ? _c[1] : _c[1] = () => props.value();
}"
`;

exports[`hooks > should optimize useEffect 1`] = `
"import { useMemo as _useMemo } from \\"react\\";
import { $$cache as _$$cache } from \\"forgetti/runtime\\";
import { $$equals as _$$equals } from \\"forgetti/runtime\\";
import { useEffect } from 'react';
function Example(props) {
  let _c = _$$cache(_useMemo, 5),
    _eq = _$$equals(_c, 0, props),
    _v = _eq ? _c[0] : _c[0] = props,
    _v2 = _eq ? _c[1] : _c[1] = _v.example,
    _eq2 = _$$equals(_c, 2, _v2),
    _v3 = _eq2 ? _c[2] : _c[2] = _v2,
    _hoisted = useEffect(() => props.value(), [_eq2 ? _c[3] : _c[3] = [_v3]]);
  _$$equals(_c, 4, _hoisted) ? _c[4] : _c[4] = _hoisted;
}"
`;

exports[`hooks > should optimize useEffect with 0 dependencies 1`] = `
"import { useMemo as _useMemo } from \\"react\\";
import { $$cache as _$$cache } from \\"forgetti/runtime\\";
import { $$equals as _$$equals } from \\"forgetti/runtime\\";
import { useEffect } from 'react';
function Example(props) {
  let _c = _$$cache(_useMemo, 2),
    _hoisted = useEffect(() => props.value(), [0 in _c ? _c[0] : _c[0] = []]);
  _$$equals(_c, 1, _hoisted) ? _c[1] : _c[1] = _hoisted;
}"
`;

exports[`hooks > should optimize useEffect with auto dependencies 1`] = `
"import { useMemo as _useMemo } from \\"react\\";
import { $$cache as _$$cache } from \\"forgetti/runtime\\";
import { $$equals as _$$equals } from \\"forgetti/runtime\\";
import { useEffect } from 'react';
function Example(props) {
  let _c = _$$cache(_useMemo, 3),
    _eq = _$$equals(_c, 0, props),
    _v = _eq ? _c[0] : _c[0] = props,
    _v2 = _eq ? _c[1] : _c[1] = () => props.value(),
    _hoisted = useEffect(_v2, [_v2]);
  _$$equals(_c, 2, _hoisted) ? _c[2] : _c[2] = _hoisted;
}"
`;

exports[`hooks > should optimize useMemo 1`] = `
"import { useMemo as _useMemo } from \\"react\\";
import { $$cache as _$$cache } from \\"forgetti/runtime\\";
import { $$equals as _$$equals } from \\"forgetti/runtime\\";
import { useMemo } from 'react';
function Example(props) {
  let _c = _$$cache(_useMemo, 5),
    _eq = _$$equals(_c, 0, props),
    _v = _eq ? _c[0] : _c[0] = props,
    _v2 = _eq ? _c[1] : _c[1] = _v.value,
    _eq2 = _$$equals(_c, 2, _v2),
    _v3 = _eq2 ? _c[2] : _c[2] = _v2,
    _v4 = _eq2 ? _c[3] : _c[3] = [_v3];
  return _eq2 ? _c[4] : _c[4] = (() => props.value())();
}"
`;

exports[`hooks > should optimize useMemo with 0 dependencies 1`] = `
"import { useMemo as _useMemo } from \\"react\\";
import { $$cache as _$$cache } from \\"forgetti/runtime\\";
import { useMemo } from 'react';
function Example(props) {
  let _c = _$$cache(_useMemo, 2),
    _v = 0 in _c ? _c[0] : _c[0] = [];
  return 1 in _c ? _c[1] : _c[1] = (() => props.value())();
}"
`;

exports[`hooks > should optimize useMemo with auto dependencies 1`] = `
"import { useMemo as _useMemo } from \\"react\\";
import { $$cache as _$$cache } from \\"forgetti/runtime\\";
import { $$equals as _$$equals } from \\"forgetti/runtime\\";
import { useMemo } from 'react';
function Example(props) {
  let _c = _$$cache(_useMemo, 3),
    _eq = _$$equals(_c, 0, props),
    _v = _eq ? _c[0] : _c[0] = props,
    _v2 = _eq ? _c[1] : _c[1] = () => props.value();
  return _eq ? _c[2] : _c[2] = _v2();
}"
`;

exports[`hooks > should optimize useRef 1`] = `
"import { useMemo as _useMemo } from \\"react\\";
import { $$cache as _$$cache } from \\"forgetti/runtime\\";
import { useRef } from 'react';
function Example(props) {
  let _c = _$$cache(_useMemo, 1);
  return 0 in _c ? _c[0] : _c[0] = {
    current: props.value
  };
}"
`;
