// Vitest Snapshot v1

exports[`statements > should optimize do-while statements 1`] = `
"import { useMemo as _useMemo } from \\"react\\";
import { $$cache as _$$cache } from \\"forgetti/runtime\\";
import { $$branch as _$$branch } from \\"forgetti/runtime\\";
import { $$equals as _$$equals } from \\"forgetti/runtime\\";
function Example(props) {
  let i = 0,
    _c = _$$branch(_$$cache(_useMemo, 1), 0, 0),
    _id = 0;
  do {
    let _l = _$$branch(_c, _id++, 3),
      _eq = _$$equals(_l, 0, i),
      _v = _eq ? _l[0] : _l[0] = i;
    _eq ? _l[1] : _l[1] = console.log(_v);
    let _hoisted = i += 1;
    _$$equals(_l, 2, _hoisted) ? _l[2] : _l[2] = _hoisted;
  } while (i < props.x);
}"
`;

exports[`statements > should optimize for statements 1`] = `
"import { useMemo as _useMemo } from \\"react\\";
import { $$cache as _$$cache } from \\"forgetti/runtime\\";
import { $$branch as _$$branch } from \\"forgetti/runtime\\";
import { $$equals as _$$equals } from \\"forgetti/runtime\\";
function Example(props) {
  let _c = _$$branch(_$$cache(_useMemo, 1), 0, 0),
    _id = 0;
  for (let i = 0; i < 10; i += 1) {
    let _l = _$$branch(_c, _id++, 2),
      _eq = _$$equals(_l, 0, i),
      _v = _eq ? _l[0] : _l[0] = i;
    _eq ? _l[1] : _l[1] = console.log(_v);
  }
}"
`;

exports[`statements > should optimize for-in statements 1`] = `
"import { useMemo as _useMemo } from \\"react\\";
import { $$cache as _$$cache } from \\"forgetti/runtime\\";
import { $$branch as _$$branch } from \\"forgetti/runtime\\";
import { $$equals as _$$equals } from \\"forgetti/runtime\\";
function Example(props) {
  let _c = _$$cache(_useMemo, 3),
    _eq = _$$equals(_c, 0, props),
    _v = _eq ? _c[0] : _c[0] = props,
    _v2 = _eq ? _c[1] : _c[1] = _v.arr,
    _c2 = _$$branch(_c, 2, 0),
    _id = 0;
  for (const x in _v2) {
    let _l = _$$branch(_c2, _id++, 2),
      _eq2 = _$$equals(_l, 0, x),
      _v3 = _eq2 ? _l[0] : _l[0] = x;
    _eq2 ? _l[1] : _l[1] = console.log(_v3);
  }
}"
`;

exports[`statements > should optimize for-of statements 1`] = `
"import { useMemo as _useMemo } from \\"react\\";
import { $$cache as _$$cache } from \\"forgetti/runtime\\";
import { $$branch as _$$branch } from \\"forgetti/runtime\\";
import { $$equals as _$$equals } from \\"forgetti/runtime\\";
function Example(props) {
  let _c = _$$cache(_useMemo, 3),
    _eq = _$$equals(_c, 0, props),
    _v = _eq ? _c[0] : _c[0] = props,
    _v2 = _eq ? _c[1] : _c[1] = _v.arr,
    _c2 = _$$branch(_c, 2, 0),
    _id = 0;
  for (const x of _v2) {
    let _l = _$$branch(_c2, _id++, 2),
      _eq2 = _$$equals(_l, 0, x),
      _v3 = _eq2 ? _l[0] : _l[0] = x;
    _eq2 ? _l[1] : _l[1] = console.log(_v3);
  }
}"
`;

exports[`statements > should optimize if statements 1`] = `
"import { useMemo as _useMemo } from \\"react\\";
import { $$cache as _$$cache } from \\"forgetti/runtime\\";
import { $$branch as _$$branch } from \\"forgetti/runtime\\";
import { $$equals as _$$equals } from \\"forgetti/runtime\\";
function Example(props) {
  let _c = _$$cache(_useMemo, 6),
    _eq = _$$equals(_c, 0, props),
    _v = _eq ? _c[0] : _c[0] = props,
    _v2 = _eq ? _c[1] : _c[1] = _v.type,
    _eq2 = _$$equals(_c, 2, _v2),
    _v3 = _eq2 ? _c[2] : _c[2] = _v2;
  if (_eq2 ? _c[3] : _c[3] = _v3 === 'a') {
    let _c2 = _$$branch(_c, 4, 4),
      _eq3 = _$$equals(_c2, 0, props),
      _v5 = _eq3 ? _c2[0] : _c2[0] = props,
      _v6 = _eq3 ? _c2[1] : _c2[1] = _v5.value,
      _eq4 = _$$equals(_c2, 2, _v6),
      _v7 = _eq4 ? _c2[2] : _c2[2] = _v6;
    return _eq4 ? _c2[3] : _c2[3] = examples.a(_v7);
  } else {
    let _c3 = _$$branch(_c, 5, 4),
      _eq5 = _$$equals(_c3, 0, props),
      _v9 = _eq5 ? _c3[0] : _c3[0] = props,
      _v10 = _eq5 ? _c3[1] : _c3[1] = _v9.value,
      _eq6 = _$$equals(_c3, 2, _v10),
      _v11 = _eq6 ? _c3[2] : _c3[2] = _v10;
    return _eq6 ? _c3[3] : _c3[3] = examples.b(_v11);
  }
}"
`;

exports[`statements > should optimize labeled statements 1`] = `
"import { useMemo as _useMemo } from \\"react\\";
import { $$cache as _$$cache } from \\"forgetti/runtime\\";
import { $$branch as _$$branch } from \\"forgetti/runtime\\";
function Example(props) {
  let _c3 = _$$cache(_useMemo, 2);
  foo: {
    let _c2 = _$$branch(_c3, 0, 1);
    {
      let _c = _$$branch(_c2, 0, 2);
      0 in _c ? _c[0] : _c[0] = console.log(\\"face\\");
      break foo;
      1 in _c ? _c[1] : _c[1] = console.log(\\"this will not be executed\\");
    }
  }
  1 in _c3 ? _c3[1] : _c3[1] = console.log(\\"swap\\");
}"
`;

exports[`statements > should optimize switch statements 1`] = `
"import { useMemo as _useMemo } from \\"react\\";
import { $$cache as _$$cache } from \\"forgetti/runtime\\";
import { $$branch as _$$branch } from \\"forgetti/runtime\\";
import { $$equals as _$$equals } from \\"forgetti/runtime\\";
function Example(props) {
  let _c = _$$cache(_useMemo, 6),
    _eq = _$$equals(_c, 0, props),
    _v = _eq ? _c[0] : _c[0] = props;
  switch (_eq ? _c[1] : _c[1] = _v.type) {
    case 'a':
      let _c2 = _$$branch(_c, 2, 4),
        _eq2 = _$$equals(_c2, 0, props),
        _v3 = _eq2 ? _c2[0] : _c2[0] = props,
        _v4 = _eq2 ? _c2[1] : _c2[1] = _v3.value,
        _eq3 = _$$equals(_c2, 2, _v4),
        _v5 = _eq3 ? _c2[2] : _c2[2] = _v4;
      return _eq3 ? _c2[3] : _c2[3] = examples.a(_v5);
    case 'b':
      let _c3 = _$$branch(_c, 3, 4),
        _eq4 = _$$equals(_c3, 0, props),
        _v7 = _eq4 ? _c3[0] : _c3[0] = props,
        _v8 = _eq4 ? _c3[1] : _c3[1] = _v7.value,
        _eq5 = _$$equals(_c3, 2, _v8),
        _v9 = _eq5 ? _c3[2] : _c3[2] = _v8;
      return _eq5 ? _c3[3] : _c3[3] = examples.b(_v9);
    case 'c':
      let _c4 = _$$branch(_c, 4, 4),
        _eq6 = _$$equals(_c4, 0, props),
        _v11 = _eq6 ? _c4[0] : _c4[0] = props,
        _v12 = _eq6 ? _c4[1] : _c4[1] = _v11.value,
        _eq7 = _$$equals(_c4, 2, _v12),
        _v13 = _eq7 ? _c4[2] : _c4[2] = _v12;
      return _eq7 ? _c4[3] : _c4[3] = examples.c(_v13);
    default:
      let _c5 = _$$branch(_c, 5, 4),
        _eq8 = _$$equals(_c5, 0, props),
        _v15 = _eq8 ? _c5[0] : _c5[0] = props,
        _v16 = _eq8 ? _c5[1] : _c5[1] = _v15.value,
        _eq9 = _$$equals(_c5, 2, _v16),
        _v17 = _eq9 ? _c5[2] : _c5[2] = _v16;
      return _eq9 ? _c5[3] : _c5[3] = examples.default(_v17);
  }
}"
`;

exports[`statements > should optimize throw statements 1`] = `
"import { useMemo as _useMemo } from \\"react\\";
import { $$cache as _$$cache } from \\"forgetti/runtime\\";
import { $$equals as _$$equals } from \\"forgetti/runtime\\";
function Example(props) {
  let _c = _$$cache(_useMemo, 5),
    _v = 0 in _c ? _c[0] : _c[0] = createError,
    _eq = _$$equals(_c, 1, props),
    _v2 = _eq ? _c[1] : _c[1] = props,
    _v3 = _eq ? _c[2] : _c[2] = _v2.message,
    _eq2 = _$$equals(_c, 3, _v3),
    _v4 = _eq2 ? _c[3] : _c[3] = _v3;
  throw _eq2 ? _c[4] : _c[4] = _v(_v4);
}"
`;

exports[`statements > should optimize try statements 1`] = `
"import { useMemo as _useMemo } from \\"react\\";
import { $$cache as _$$cache } from \\"forgetti/runtime\\";
import { $$branch as _$$branch } from \\"forgetti/runtime\\";
import { $$equals as _$$equals } from \\"forgetti/runtime\\";
function Example(props) {
  let _c2 = _$$cache(_useMemo, 3);
  try {
    let _c = _$$branch(_c2, 0, 2),
      _eq = _$$equals(_c, 0, props),
      _v = _eq ? _c[0] : _c[0] = props;
    _eq ? _c[1] : _c[1] = _v.a();
  } catch (e) {
    let _c3 = _$$branch(_c2, 1, 3),
      _eq2 = _$$equals(_c3, 0, props),
      _v3 = _eq2 ? _c3[0] : _c3[0] = props,
      _eq3 = _$$equals(_c3, 1, e),
      _v4 = _eq3 ? _c3[1] : _c3[1] = e;
    _eq2 && _eq3 ? _c3[2] : _c3[2] = _v3.b(_v4);
  } finally {
    let _c4 = _$$branch(_c2, 2, 2),
      _eq5 = _$$equals(_c4, 0, props),
      _v6 = _eq5 ? _c4[0] : _c4[0] = props;
    _eq5 ? _c4[1] : _c4[1] = _v6.c();
  }
}"
`;

exports[`statements > should optimize while statements 1`] = `
"import { useMemo as _useMemo } from \\"react\\";
import { $$cache as _$$cache } from \\"forgetti/runtime\\";
import { $$branch as _$$branch } from \\"forgetti/runtime\\";
import { $$equals as _$$equals } from \\"forgetti/runtime\\";
function Example(props) {
  let i = 0,
    _c = _$$branch(_$$cache(_useMemo, 1), 0, 0),
    _id = 0;
  while (i < props.x) {
    let _l = _$$branch(_c, _id++, 3),
      _eq = _$$equals(_l, 0, i),
      _v = _eq ? _l[0] : _l[0] = i;
    _eq ? _l[1] : _l[1] = console.log(_v);
    let _hoisted = i += 1;
    _$$equals(_l, 2, _hoisted) ? _l[2] : _l[2] = _hoisted;
  }
}"
`;
